Основными концепциями Vue являются: 
    конструктор
    компоненты
    директивы
    переходы

Директивы — специальные атрибуты для добавления элементам html дополнительной функциональности.
Рассмотрим некоторые встроенные директивы (кто работал с Angular, тому они покажутся очень знакомыми):
    V-bind — динамически связывается с одним или несколькими атрибутами.
    V-cloak — прячет “усатые” выражения, пока не подтянулись данные
    v-if — условие для рендера элемента
    V-else — обозначает “else блок” для v-if
    V-for — циклично проходит массив объектов
    V-model — связывает состояние с input элементом
    V-on — связывает слушателя события с элементом
    V-once — рендерит элемент только вначале и больше не следит за ним
    V-pre — не компилирует элемент и его дочерние элементы
    V-show — переключает видимость элемента, изменяя свойство CSS display
    V-text — обновляет textContent элемента
Все Vue-директивы имеют префикс “v-”. В директиву передается какое-то значение состояния, а в качестве аргументов могут быть атрибуты html или события.

Компоненты помогают расширить основные html элементы и внедрить переиспользуемый код. По сути, компоненты — повторно используемые части UI. 
На этапе проектирования мы разбиваем наше приложение на независимые части и получаем древовидную структуру компонентов.
В Vue.js нет особых требований к именам компонентов, но хорошая практика — придерживаться правил W3C насчет кастомных компонентов, то есть буквы нижнего регистра и разделения через дефис.

Vue предоставляет различные способы применения анимационных эффектов, когда элементы отрисованы, обновлены или удалены из DOM. Они включают в себя инструменты для:

    автоматического применения классов для CSS-переходов и анимаций
    интеграции сторонних библиотек для CSS-анимаций, таких как Animate.css
    использования JavaScript для манипуляции DOM-ом
    интеграции сторонних JavaScript библиотек для анимаций, таких как Velocity.js

Во Vue.js за маршрутизацию отвечает отдельный пакет vue-router. Он поддерживает вложенные маршруты к вложенным компонентам, предлагает упрощенное API для навигационных хуков, управляемое поведение скрола и продвинутый контроль переходов.

Для работы с Ajax-запросами существует плагин vue-resource. Он предоставляет возможности для создания веб-запросов и обработки ответов с помощью XMLHttpRequest или JSONP. Также особенностью плагина является поддержка Promise API и URI шаблонов.

Vuex — паттерн и библиотека управления состоянием для приложений на Vue.js. Он предоставляет централизованное общее состояние для всех компонентов в приложении и правила, обеспечивающие предсказуемое изменение состояния.

Для отладки в браузере существует Vue-devtools (к сожалению, пока только для Chrome), который позволяет видеть, какие компоненты есть в нашем приложении и их текущее состояние.
Также он прекрасно работает с Vuex и позволяет выполнять так называемый time-travel debugging: в браузере мы можем увидеть историю состояний и переключаться между ними.

